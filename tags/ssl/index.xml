<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SSL on Админская фамилия</title><link>https://bubnovd.net/tags/ssl/</link><description>Recent content in SSL on Админская фамилия</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Mar 2014 18:44:00 +0000</lastBuildDate><atom:link href="https://bubnovd.net/tags/ssl/index.xml" rel="self" type="application/rss+xml"/><item><title>MiTM атака на RDP с SSL</title><link>https://bubnovd.net/blogger/mitm-%D0%B0%D1%82%D0%B0%D0%BA%D0%B0-%D0%BD%D0%B0-rdp-%D1%81-ssl/</link><pubDate>Wed, 05 Mar 2014 18:44:00 +0000</pubDate><guid>https://bubnovd.net/blogger/mitm-%D0%B0%D1%82%D0%B0%D0%BA%D0%B0-%D0%BD%D0%B0-rdp-%D1%81-ssl/</guid><description>https://labs.portcullis.co.uk/blog/ssl-man-in-the-middle-attacks-on-rdp/Копипаста:This post seeks to demonstrate why users learning to ignore those certificate warnings for SSL-based RDP connection could leave them open to Man-in-the-middle (MiTM) attacks. The MiTM attack demonstrated displays keystrokes sent during an RDP session. We conclude with some advice on how to avoid being the victim of such an attack. Types of RDP connectionsBefore we start, let’s first clarify which of the various RDP connection types this post is about.</description><content>&lt;p>&lt;a href="https://labs.portcullis.co.uk/blog/ssl-man-in-the-middle-attacks-on-rdp/">https://labs.portcullis.co.uk/blog/ssl-man-in-the-middle-attacks-on-rdp/&lt;/a>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Копипаста:&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->This post seeks to demonstrate why users learning to ignore those certificate warnings for SSL-based RDP connection could leave them open to Man-in-the-middle (MiTM) attacks. The MiTM attack demonstrated displays keystrokes sent during an RDP session. We conclude with some advice on how to avoid being the victim of such an attack.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->Types of RDP connections&lt;!-- raw HTML omitted -->Before we start, let’s first clarify which of the various RDP connection types this post is about. There are 3 types of connection:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->RDP Security Layer&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->SSL (TLS 1.0)&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->CredSSP (SSL with NLA)&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->It’s the middle one we’ll demonstrate an attack on in this post. On the Terminal Server, SSL is configured like this (with any NLA checkboxes unticked):&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->RDP configuration used&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Some connections may also be vulnerable if the server is set to “Negotiate” its Security Layer to – as that could result in SSL being used.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->SSL certificate warning&lt;!-- raw HTML omitted -->If users are used to dismissing a warnings like this one each time they connect, then this post is relevant to them:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->SSL warning that should not be routinely ignored&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Attack overview&lt;!-- raw HTML omitted -->At a high level, the attack will proceed in a similar way to any SSL MiTM attack:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Have the victim connect to a PoC tool (rdp-ssl-mitm.py) on our system instead of the RDP server they’re trying to reach&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Using the RDP protocol, our tool will negotiate the use of SSL&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->At the point the connection is upgraded to SSL, our tool will negotiate an SSL connection with the RDP client using its own (untrusted) SSL certificate. This will give our tool access to data sent by the RDP client in cleartext&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Our tool also needs to create an SSL connection with the legitimate RDP server down which it will send data from the RDP client&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->The only complication to this attack is that our tool has to talk the RDP protocol briefly before creating the required SSL connections.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->1. Having the victim connect to us&lt;!-- raw HTML omitted -->In a real attack, we’d need to have the RDP client connect to our system instead of the target server. This could be achieved using ARP spoofing, DNS spoofing or some other method. Rather than cloud the demonstration with such details, we’ll assume this is step is possible and just type the IP address of the attacker system into the victim RDP client.&lt;!-- raw HTML omitted --> On our attacker system (192.168.190.170), we start our PoC tool. We tell it forward connections to the legitimate RDP server 192.168.2.96:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->$ ./rdp-ssl-mitm.py -r 192.168.2.96:3389&lt;!-- raw HTML omitted -->[+] Listening for connections on 0.0.0.0:3389&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->And we simply enter the IP address of the attacker system into the RDP client (the client connects from 192.168.190.1):&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->We enter the attacker IP address to avoid the complexity of ARP spoofing&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->2. Talk RDP to the client to negotiate the use of SSL&lt;!-- raw HTML omitted -->The negotiation of SSL is quite short within the RDP protocol:&lt;!-- raw HTML omitted --> Message #1: Client &amp;gt; MiTM &amp;gt; Server&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->03 00 00 13 0e e0 00 00 00 00 00 01 00 08 00 &lt;em>03&lt;/em>&lt;!-- raw HTML omitted -->00 00 00&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->This message is fairly static and our tool just passes it through to the server unaltered. The &lt;em>03&lt;/em> means that the client supports RDP Security Layer, SSL and CredSSP.&lt;!-- raw HTML omitted --> Message #2: Server &amp;gt; MiTM &amp;gt; Client&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->03 00 00 13 0e d0 00 00 12 34 00 02 00 08 00 &lt;em>01&lt;/em>&lt;!-- raw HTML omitted -->00 00 00&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->In the next message the server chooses the protocol to use. The &lt;em>01&lt;/em> in this case means the the server has chosen SSL (not CredSSP which would be &lt;em>02&lt;/em>). Again, we pass this message back to the client unaltered.&lt;!-- raw HTML omitted --> Note that if the server were to select CredSSP (&lt;em>02&lt;/em>), then the demonstration would fail. We’re attacking SSL, not CredSSP.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->3. Create SSL connection with RDP client&lt;!-- raw HTML omitted -->Message #3: Client &amp;gt; MiTM&lt;!-- raw HTML omitted --> The 3rd message is the start of an SSL connection. Here is the SSL Client Hello message beginning &lt;em>16 03 01&lt;/em>… (03 01 being the version of SSL used: SSL 3.1 AKA TLS 1.0).&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;em>16 03 01&lt;/em> 00 5a 01 00 00 56 03 01 52 21 ac be 63&lt;!-- raw HTML omitted -->20 ce de 4b a5 90 18 f0 66 97 ee 9d 54 14 e3 1c&lt;!-- raw HTML omitted -->&amp;hellip; snip &amp;hellip;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Our tool does not forward this data directly to the server. Instead it responds with and SS Server Hello message and proceeds to complete the SSL connection with the client.&lt;!-- raw HTML omitted --> The SSL certificate we present to the RDP client is issued to fred and this is displayed in the mstsc SSL warning shown to the user:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->The certificate presented by our PoC tool causes this security warning&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->The details of the SSL certificate differ to those the user would normally see – if the user were to check. To refine the attack we could make the certificate details match more closely, but we’d never get the signature to be the same as the normal certificate, so there’d always be a difference.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->4. Create SSL connection with RDP server&lt;!-- raw HTML omitted -->Simultaneously, our tool also sends and SSL Client Hello to the RDP server and creates a second SSL connection.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->Displaying key strokes&lt;!-- raw HTML omitted -->Our tool is now in a position to display the cleartext messages about keystrokes (for example) sent by the RDP client. It is relatively easy to determine what sort of message is sent when a key is pressed. The following two 4-byte messages are sent when the ‘p’ key is pressed:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->44 04 00 19&lt;!-- raw HTML omitted -->44 04 01 19&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->The 3rd byte is the direction of key (00 means key-down, 01 means key-up).  The 4th byte is the key scan code.  If we &lt;!-- raw HTML omitted -->look up&lt;!-- raw HTML omitted --> 0×19 we find it corresponds to the p key.&lt;!-- raw HTML omitted --> In the general case, the scan-code to character mapping depends which keyboard you’re using. In the PoC tool I implemented the mapping for for QWERTY keyboards, so if you have a UK/US keyboard, it should translate the majority of scan-codes to the correct characters. Note that we don’t get know whether characters are uppercase or lowercase. We’d have to manually track the status of CAPS Lock and SHIFT keys.&lt;!-- raw HTML omitted --> Without getting too bogged down in the details, here’s some sample output from the PoC tool that shows keystrokes being logged – in particular an administrator logging in with username Administrator, password Password:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->$ ./rdp-ssl-mitm.py -r 192.168.2.96:3389 &lt;!-- raw HTML omitted -->[+] Listening for connections on 0.0.0.0:3389&lt;!-- raw HTML omitted -->[+] Incoming connection from 192.168.190.1:60370&lt;!-- raw HTML omitted -->[+] New outgoing request to 192.168.2.96:3389 (SSL: 0)&lt;!-- raw HTML omitted -->[+] Connected&lt;!-- raw HTML omitted -->[+] Detected incoming SSL connection. Turning self into SSL socket&lt;!-- raw HTML omitted -->[+] Incoming connection from 192.168.190.1:60374&lt;!-- raw HTML omitted -->[+] New outgoing request to 192.168.2.96:3389 (SSL: 0)&lt;!-- raw HTML omitted -->[+] Connected&lt;!-- raw HTML omitted -->[+] Detected incoming SSL connection. Turning self into SSL socket&lt;!-- raw HTML omitted -->&amp;lt;LShift-down&amp;gt;A&amp;lt;LShift-up&amp;gt;DMINISTRATOR&amp;lt;Tab&amp;gt;&amp;lt;LShift-down&amp;gt;P&amp;lt;LShift-up&amp;gt;ASSWORD&amp;lt;Enter&amp;gt;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Conclusions&lt;!-- raw HTML omitted -->Learning to ignore SSL certificate warnings is as bad for RDP connection as it is for HTTPS websites. The results are similar: users quickly become vulnerable to Man-in-the-middle attacks. Such attacks can harvest usernames, passwords, keystrokes and other sensitive data.&lt;!-- raw HTML omitted --> Using SSL certificates that are signed by a Certificate Authority the RDP client trusts will result in no warning under normal operation, so is highly recommended.&lt;!-- raw HTML omitted --> This attack doesn’t work if the server mandates NLA, so using NLA is also highly recommended.&lt;!-- raw HTML omitted --> It’s important to note that this isn’t a vulnerability in the RDP Client or Server software.  Nor is this a  new discovery.  It’s a weakness in way RDP is sometimes used which stems from users ignoring security warnings.  At a technical level, this is a fairly vanilla SSL MiTM attack.&lt;!-- raw HTML omitted --> It might be interesting to extend this work by recording screen captures; or by injecting images of login boxes to encourage users to part of with other credentials. There would also be an opportunity to attack any drives that the RDP client has mapped for drive redirection – see &lt;!-- raw HTML omitted -->Attacking the RDP Clients&lt;!-- raw HTML omitted --> for inspiration. These would be pretty demanding coding challenges, though!&lt;/p></content></item><item><title>О безопасных каналах для юных админов</title><link>https://bubnovd.net/blogger/%D0%BE-%D0%B1%D0%B5%D0%B7%D0%BE%D0%BF%D0%B0%D1%81%D0%BD%D1%8B%D1%85-%D0%BA%D0%B0%D0%BD%D0%B0%D0%BB%D0%B0%D1%85-%D0%B4%D0%BB%D1%8F-%D1%8E%D0%BD%D1%8B%D1%85-%D0%B0%D0%B4%D0%BC%D0%B8%D0%BD%D0%BE%D0%B2/</link><pubDate>Fri, 23 Aug 2013 21:23:00 +0000</pubDate><guid>https://bubnovd.net/blogger/%D0%BE-%D0%B1%D0%B5%D0%B7%D0%BE%D0%BF%D0%B0%D1%81%D0%BD%D1%8B%D1%85-%D0%BA%D0%B0%D0%BD%D0%B0%D0%BB%D0%B0%D1%85-%D0%B4%D0%BB%D1%8F-%D1%8E%D0%BD%D1%8B%D1%85-%D0%B0%D0%B4%D0%BC%D0%B8%D0%BD%D0%BE%D0%B2/</guid><description>Написано по-русски и понятно даже для неподготовленного пользователя.
Параллельно с развитием технологий защиты интернет-трафика от несанкционированного доступа развиваются и технологии перехвата защищенного трафика. Перехватить и изучить незашифрованный трафик пользователя уже давно не составляет труда даже для рядового юзера. Практически каждому известно слово «сниффер». Теоретически, защищенные SSL/TSL-соединения перехватить обычными средствами невозможно. Но так ли это?
На самом деле — не совсем так. Да, зашифрованный трафик теоретически невозможно расшифровать, хотя опять таки теоретически при очень большой необходимости и желании, и такой трафик можно расшифровать, подобрав ключ.</description><content>&lt;p>Написано по-русски и понятно даже для неподготовленного пользователя.&lt;/p>
&lt;p>Параллельно с развитием технологий защиты интернет-трафика от несанкционированного доступа развиваются и технологии перехвата защищенного трафика. Перехватить и изучить незашифрованный трафик пользователя уже давно не составляет труда даже для рядового юзера. Практически каждому известно слово «сниффер». Теоретически, защищенные &lt;a href="http://ru.wikipedia.org/wiki/SSL">SSL&lt;/a>/&lt;a href="http://ru.wikipedia.org/wiki/TLS">TSL&lt;/a>-соединения перехватить обычными средствами невозможно. Но так ли это?&lt;/p>
&lt;p>На самом деле — не совсем так. Да, зашифрованный трафик теоретически невозможно расшифровать, хотя опять таки теоретически при очень большой необходимости и желании, и такой трафик можно расшифровать, подобрав ключ. Однако для этого нужны такие затраты ресурсов, что актуальность взлома сохраняется только, наверное, на правительственном или военном уровне :)&lt;/p>
&lt;p>При работе по защищенному соединению (самый просто пример — &lt;a href="http://habrahabr.ru/blogs/infosecurity/44818/">HTTPS&lt;/a>) весь трафик между взаимодействующими точками в сети шифруется на стороне отправителя и дешифруется на стороне получателя. Шифруется трафик, идущий в обоих направлениях. Для того, чтобы его зашифровать и расшифровать нужна пара ключей (ассиметричное шифрование). Публичный ключ служит для зашифрования и передается получателю данных, а приватный — для дешифрования, он остается у отправителя. Таким образом, узлы, между которыми устанавливается SSL-соединение, обмениваются публичными ключами. Далее, для повышения производительности формируется единый ключ, который пересылается уже в зашифрованном виде и используется как для шифрации, так и для дешифрации на обеих сторонах (симметричное шифрование).&lt;/p>
&lt;p>А как они это делают? Обычно — по тому же каналу, по которому далее будет идти защищенный трафик. Причем обмен ключами происходит в открытом режиме. В случае HTTPS ключ сервера связан с сертификатом, который пользователю предлагается просмотреть и принять. И вот этот сертификат как раз и может перехватить любой промежуточный сервер, на пути которого идет сертификат в открытом виде (прокси, роутер).&lt;/p>
&lt;p>Чтобы далее «читать» весь трафик пользователя, промежуточный сервер подменяет сертификат на свой. Т.е. он просто сам подключается к клиенту со своим сертификатом, и в то же время подключается к удаленному серверу. Клиенту приходит «левый» сертификат от сервера-злоумышленника, а браузер сообщает пользователю об опасности (такие сертификаты всегда не подписаны). У пользователя остается выбор: принять сертификат и работать с сайтом, либо отказаться его принимать, но и работать с сайтом тогда уже не получится. Иногда пользователи вообще игнорируют содержимое сертификатов и машинально принимают любые переданные им.&lt;/p>
&lt;p>Если пользователь принимает сертификат-подделку, то трафик будет идти по следующей схеме:&lt;/p>
&lt;p>&lt;em>клиент &amp;lt;= SSL-соединение =&amp;gt; сервер-прослушка &amp;lt;= SSL-соединение =&amp;gt; сервер назначения&lt;/em>&lt;/p>
&lt;p>Т.е. промежуточный сервер будет получать весь ваш «защищенный» трафик в открытом виде. Стоит также заметить, что передача сертификата происходит в начале каждой сессии HTTPS.&lt;/p>
&lt;p>В случае защищенного SSH при первом соединении с сервером на клиенте сохраняется ключ сервера, а на сервере — ключ клиента. Эти ключи передаются между данными клиентом-сервером только один раз, при первом подключении. Если в этом случае SSH-трафик попытаются перехватить, то и клиент, и сервер откажут в соединении из-за несоответствия ключей. Так как ключи можно перенести между клиентом и сервером обходным путем (по защищенному каналу или на внешнем носителе), этот способ соединения является относительно безопасным. Его могут лишь заблокировать, заставив пользователя работать в открытую.&lt;/p>
&lt;p>Стоит отметить, что уже давно продаются так называемые «решения по информационной безопасности предприятия», которые перехватывают весь трафик, проходящий через офисный прокси-сервер, и «читают» его. Программы ищут наличие определенных фраз или информации определенного вида в потоке данных от браузеров, почтовых программ, ftp-клиентов, мессенджеров сотрудников офиса. Причем, эти программы умеют различать и обрабатывать правильно самые разные виды информационного взаимодействия с серверами. В том числе, они проверяют и защищенный SSL-трафик путем подмены сертификатов. С разработкой одной из таких систем я сталкивался почти непосредственно.&lt;/p>
&lt;p>Но пути спасения от тотальной слежки есть. Через установленное SSH-соединение можно направлять любой нужный трафик, который с SSH-сервера будет уже в открытом виде идти на конечную точку. Этот способ называется SSH-туннелинг (tunneling). Так можно обезопасить прохождение трафика по незащищенному каналу, но имеет смысл такой подход только при наличии доверенного сервера с поднятым и настроенным на туннелинг SSH-демоном. Причем организовать это достаточно просто. SSH-клиент подключается к серверу, настраивается на прослушку любого данного порта на локальной машине. Этот клиент будет предоставлять услугу SOCKS5-прокси, т.е. его использование можно настроить в любом браузере, почтовых программах, IM-ах и т.д. Через SSH-туннель пакеты попадают на сервер, а с него уходят на целевой сервер. Схема получается следующая:&lt;/p>
&lt;p>&lt;em>[localhost: клиент &amp;lt;=&amp;gt; proxy] &amp;lt;== SSH-соединение ==&amp;gt; сервер &amp;lt;=&amp;gt; целевой сервер&lt;/em>&lt;/p>
&lt;p>Другой способ защиты трафика — &lt;a href="http://ru.wikipedia.org/wiki/VPN">VPN&lt;/a>-канал. В использовании он проще и удобнее SSH-туннелинга, но в первичной установке и настройке сложнее. Основное удобство этого способа в том, что в программах не нужно прописывать прокси. А некоторый софт и вовсе прокси не поддерживает, следовательно только VPN и подойдет.&lt;/p>
&lt;p>На практике есть два варианта работы. Первый — покупка VPN-акканута, который продается специально для этих целей (шифрование трафика по небезопасному каналу). В этом случае продаются обычно аккаунты, соединяться с которыми надо по протоколам PPTP (обычный VPN, который реализован, например, в Windows) или L2TP.&lt;/p>
&lt;p>Второй вариант — покупка VDS-сервера (виртуальный выделенный сервер) с любым дистрибутивом линукса на борту и поднятие на нем VPN-сервера. VDS может быть российским или американским (только не забывайте про заокеанские пинги), дешевым (от $5) и слабым или дорогим и помощнее. На VDS ставят &lt;a href="http://ru.wikipedia.org/wiki/OpenVPN">OpenVPN&lt;/a>-сервер, а на компьютере поднимается OpenVPN-клиент. Для Windows есть даже &lt;a href="http://openvpn.se/">гуишная версия клиента&lt;/a>.&lt;/p>
&lt;p>Если вы решите использовать вариант с OpenVPN, то есть например эта &lt;a href="http://elwood.su/?p=8">простая пошаговая инструкция&lt;/a> по поднятию сервера (Debian). Установить клиента еще проще, особенно под Windows. Отметить стоит только один нюанс. Если весь трафик требуется пустить по созданному VPN-соединению, то требуется прописать default gateway на шлюз VPN (параметр redirect-gateway в конфиге клиента), а если только часть трафика (на определенные хосты), то можно прописать обычные статические маршруты на данные хосты (по IP; например, route add -p 81.25.32.25 10.7.0.1).&lt;/p>
&lt;p>Для соединения OpenVPN обмен ключами происходит в ручном режиме, т.е. транспортировать их от сервера на клиент можно абсолютно безопасно.&lt;/p>
&lt;p>Таким образом, SSH- и VPN-соединения могут практически полностью гарантировать безопасность вашего трафика при перемещении по незащищенному каналу. Единственная проблема, которая может возникнуть в этом случае, — это запрет на SSL-трафик на корпоративном файрволе. Если SSL-трафик разрешен хотябы на один любой порт (обычно дефолтный 443), то вы уже потенциально можете поднять и SSH-тонель, и VPN-соединение, настроив соответствующего демона на вашем VDS на этот порт.&lt;/p>
&lt;p>Спасибо, &lt;a href="http://habrahabr.ru/post/46321/">Хабр&lt;/a>!&lt;/p></content></item><item><title>Настройка FTP-сервера в IIS7</title><link>https://bubnovd.net/blogger/%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-ftp-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0-%D0%B2-iis7/</link><pubDate>Tue, 03 Jul 2012 00:00:00 +0000</pubDate><guid>https://bubnovd.net/blogger/%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-ftp-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0-%D0%B2-iis7/</guid><description>FTP довольно старый протокол (ему уже больше 40 лет), но довольно удобный и до сих пор используется очень многими администраторами для обмена файлами. Есть целая куча разнообразных FTP-серверов под винду - от простейшего Quick&amp;rsquo;n Easy FTP Server до таких громил как Titan FTP Server и Serv-U. В серверных дистрибутивах Windows тоже есть возможность поднять FTP-сервер. Хоть многие и ругают MS за хромую безопасность и ошибки в коде, использование встроенных ролей сервера вместо решений стороннего производителя имеет свои плюсы.</description><content>&lt;p>FTP довольно старый протокол (ему уже больше 40 лет), но довольно удобный и до сих пор используется очень многими администраторами для обмена файлами. Есть целая куча разнообразных FTP-серверов под винду - от простейшего Quick&amp;rsquo;n Easy FTP Server до таких громил как Titan FTP Server и Serv-U.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> В серверных дистрибутивах Windows тоже есть возможность поднять FTP-сервер. Хоть многие и ругают MS за хромую безопасность и ошибки в коде, использование встроенных ролей сервера вместо решений стороннего производителя имеет свои плюсы. Главный из них - это полная совместимость со всеми службами MS (в частности AD) и тонкая настройка интеграции этих служб.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Рассмотрим установку и настройку FTP-сервера на примере Windows 2008R2 и IIS7.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Добавляем роль FTP в Диспетчер сервера - Добавление ролей. Следует выбрать Веб-сервер(IIS), в следующем окне диалога выбираем FTP-сервер.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Настройка FTP-сервера.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Открываем диспетчер сервера - Веб сервер - Диспетчер служб IIS - наш сервер. ПКМ по разделу сайты - добавить FTP-сайт.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Пишем название нашего сайта и путь к физическому расположению каталогов&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Задаем IP-адрес и порт, на которых будет висеть наш сервер. Здесь же можно установить защиту соединения и выбрать сертификат. Этим мы займемся позже.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Сейчас наша цель - сделать простейший доступ, поэтому в следующем диалоговом окне выбираем Анонимный доступ.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->На этом начальная настройка FTP-сервера закончена. Но при попытке войти в него у нас ничего не получится. На этапе настройки сервера рекомендую включить подробное логирование событий, чтобы при выявлении ошибок можно было легко их опознать. Выбираем начальную страницу нашего сервера - Ведение журнала FTP - нажимаем Выберите поля W3C и ставим галочку Дополнительные сведения &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Теперь в папке C:\inetpub\logs\LogFiles\FTPSVC мы можем увидеть подробный лог нашего сервера.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Для доступа к серверу анонимных пользователей необходимо в правилах авторизации FTP добавить правило для анонимных пользователей и установить флажок типа доступа (чтение, запись).&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Всё! Простейший FTP-сервер готов к работе. Чтобы раздать более тонкие права, следует выставить их  в разделах Правила авторизации и Проверка подлинности FTP. Для настройки прав на вложенные папки требуется выполнить такую же настройку для папок (в диспетчере выбрать не сервер целиком, а нужную папку). &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Вот так настраивается FTP-сервер, входящий в состав веб-сервера IIS7 в Windows 2008R2. Отличительной его особенностью является тесная интеграция с серверными службами Microsoft, такими как веб-сервер и контроллер домена.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Теперь рассмотрим работу FTP-сервера с сертификатами.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Протокол FTP довольно слабо защищен в плане безопасности. При авторизации пользователя, его учетные данные передаются по сети в незашифрованном виде и могут быть перехвачены злоумышленником. Чтобы этого не случилось, требуется ввести шифрование соединения.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Если у вас уже есть сертификат, то первую часть можете не читать.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Создание самоподписанного сертификата.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->На начальной странице веб-сервера выбираем пункт Сертификаты сервера. В появившемся окне щелкаем ПКМ и выбираем Создать самоподписанный сертификат. Даём ему осмысленное имя. Сертификат создается автоматически.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Настройка SSL на FTP.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->На начальной странице FTP сервера выбираем Параметры SSL FTP. Ставим галочку Требовать SSL-соединения и выбираем наш сертификат.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Теперь подключиться к серверу можно только с клиента, поддерживающего шифрованные FTP-соединения, например Filezilla. При настройке соединения в Filezilla необходимо выбрать Require explicit FTP over TLS. При подключении к FTP-серверу клиент выдаст предупреждение о сертификате. Необходимо принять его.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Теперь у нас есть безопасный FTP-сервер с возможностью тонкой настройки и интеграцией со службами Microsoft. Конечно, можно было настроить продукт стороннего производителя, но с родным не будет ничего лишнего в системе.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Не нашел, где можно детально настроить скорость и права для каждого пользователя, как в том же Titan&amp;rsquo;е например. Но это уже задача не столько FTP-сервера, сколько шейпера. MS предлагает такие решения, но уже за отдельные деньги.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Видео по настройке FTP &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></content></item></channel></rss>