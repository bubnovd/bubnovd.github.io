<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MiTM on Bubnovd</title><link>https://bubnovd.github.io/tags/mitm/</link><description>Recent content in MiTM on Bubnovd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Mar 2014 18:44:00 +0000</lastBuildDate><atom:link href="https://bubnovd.github.io/tags/mitm/index.xml" rel="self" type="application/rss+xml"/><item><title>MiTM атака на RDP с SSL</title><link>https://bubnovd.github.io/blogger/mitm-%D0%B0%D1%82%D0%B0%D0%BA%D0%B0-%D0%BD%D0%B0-rdp-%D1%81-ssl/</link><pubDate>Wed, 05 Mar 2014 18:44:00 +0000</pubDate><guid>https://bubnovd.github.io/blogger/mitm-%D0%B0%D1%82%D0%B0%D0%BA%D0%B0-%D0%BD%D0%B0-rdp-%D1%81-ssl/</guid><description>https://labs.portcullis.co.uk/blog/ssl-man-in-the-middle-attacks-on-rdp/Копипаста:This post seeks to demonstrate why users learning to ignore those certificate warnings for SSL-based RDP connection could leave them open to Man-in-the-middle (MiTM) attacks. The MiTM attack demonstrated displays keystrokes sent during an RDP session. We conclude with some advice on how to avoid being the victim of such an attack. Types of RDP connectionsBefore we start, let’s first clarify which of the various RDP connection types this post is about.</description><content>&lt;p>&lt;a href="https://labs.portcullis.co.uk/blog/ssl-man-in-the-middle-attacks-on-rdp/">https://labs.portcullis.co.uk/blog/ssl-man-in-the-middle-attacks-on-rdp/&lt;/a>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Копипаста:&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->This post seeks to demonstrate why users learning to ignore those certificate warnings for SSL-based RDP connection could leave them open to Man-in-the-middle (MiTM) attacks. The MiTM attack demonstrated displays keystrokes sent during an RDP session. We conclude with some advice on how to avoid being the victim of such an attack.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->Types of RDP connections&lt;!-- raw HTML omitted -->Before we start, let’s first clarify which of the various RDP connection types this post is about. There are 3 types of connection:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->RDP Security Layer&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->SSL (TLS 1.0)&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->CredSSP (SSL with NLA)&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->It’s the middle one we’ll demonstrate an attack on in this post. On the Terminal Server, SSL is configured like this (with any NLA checkboxes unticked):&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->RDP configuration used&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Some connections may also be vulnerable if the server is set to “Negotiate” its Security Layer to – as that could result in SSL being used.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->SSL certificate warning&lt;!-- raw HTML omitted -->If users are used to dismissing a warnings like this one each time they connect, then this post is relevant to them:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->SSL warning that should not be routinely ignored&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Attack overview&lt;!-- raw HTML omitted -->At a high level, the attack will proceed in a similar way to any SSL MiTM attack:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Have the victim connect to a PoC tool (rdp-ssl-mitm.py) on our system instead of the RDP server they’re trying to reach&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Using the RDP protocol, our tool will negotiate the use of SSL&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->At the point the connection is upgraded to SSL, our tool will negotiate an SSL connection with the RDP client using its own (untrusted) SSL certificate. This will give our tool access to data sent by the RDP client in cleartext&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Our tool also needs to create an SSL connection with the legitimate RDP server down which it will send data from the RDP client&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->The only complication to this attack is that our tool has to talk the RDP protocol briefly before creating the required SSL connections.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->1. Having the victim connect to us&lt;!-- raw HTML omitted -->In a real attack, we’d need to have the RDP client connect to our system instead of the target server. This could be achieved using ARP spoofing, DNS spoofing or some other method. Rather than cloud the demonstration with such details, we’ll assume this is step is possible and just type the IP address of the attacker system into the victim RDP client.&lt;!-- raw HTML omitted --> On our attacker system (192.168.190.170), we start our PoC tool. We tell it forward connections to the legitimate RDP server 192.168.2.96:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->$ ./rdp-ssl-mitm.py -r 192.168.2.96:3389&lt;!-- raw HTML omitted -->[+] Listening for connections on 0.0.0.0:3389&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->And we simply enter the IP address of the attacker system into the RDP client (the client connects from 192.168.190.1):&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->We enter the attacker IP address to avoid the complexity of ARP spoofing&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->2. Talk RDP to the client to negotiate the use of SSL&lt;!-- raw HTML omitted -->The negotiation of SSL is quite short within the RDP protocol:&lt;!-- raw HTML omitted --> Message #1: Client &amp;gt; MiTM &amp;gt; Server&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->03 00 00 13 0e e0 00 00 00 00 00 01 00 08 00 &lt;em>03&lt;/em>&lt;!-- raw HTML omitted -->00 00 00&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->This message is fairly static and our tool just passes it through to the server unaltered. The &lt;em>03&lt;/em> means that the client supports RDP Security Layer, SSL and CredSSP.&lt;!-- raw HTML omitted --> Message #2: Server &amp;gt; MiTM &amp;gt; Client&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->03 00 00 13 0e d0 00 00 12 34 00 02 00 08 00 &lt;em>01&lt;/em>&lt;!-- raw HTML omitted -->00 00 00&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->In the next message the server chooses the protocol to use. The &lt;em>01&lt;/em> in this case means the the server has chosen SSL (not CredSSP which would be &lt;em>02&lt;/em>). Again, we pass this message back to the client unaltered.&lt;!-- raw HTML omitted --> Note that if the server were to select CredSSP (&lt;em>02&lt;/em>), then the demonstration would fail. We’re attacking SSL, not CredSSP.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->3. Create SSL connection with RDP client&lt;!-- raw HTML omitted -->Message #3: Client &amp;gt; MiTM&lt;!-- raw HTML omitted --> The 3rd message is the start of an SSL connection. Here is the SSL Client Hello message beginning &lt;em>16 03 01&lt;/em>… (03 01 being the version of SSL used: SSL 3.1 AKA TLS 1.0).&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;em>16 03 01&lt;/em> 00 5a 01 00 00 56 03 01 52 21 ac be 63&lt;!-- raw HTML omitted -->20 ce de 4b a5 90 18 f0 66 97 ee 9d 54 14 e3 1c&lt;!-- raw HTML omitted -->&amp;hellip; snip &amp;hellip;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Our tool does not forward this data directly to the server. Instead it responds with and SS Server Hello message and proceeds to complete the SSL connection with the client.&lt;!-- raw HTML omitted --> The SSL certificate we present to the RDP client is issued to fred and this is displayed in the mstsc SSL warning shown to the user:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->The certificate presented by our PoC tool causes this security warning&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->The details of the SSL certificate differ to those the user would normally see – if the user were to check. To refine the attack we could make the certificate details match more closely, but we’d never get the signature to be the same as the normal certificate, so there’d always be a difference.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->4. Create SSL connection with RDP server&lt;!-- raw HTML omitted -->Simultaneously, our tool also sends and SSL Client Hello to the RDP server and creates a second SSL connection.&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->Displaying key strokes&lt;!-- raw HTML omitted -->Our tool is now in a position to display the cleartext messages about keystrokes (for example) sent by the RDP client. It is relatively easy to determine what sort of message is sent when a key is pressed. The following two 4-byte messages are sent when the ‘p’ key is pressed:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->44 04 00 19&lt;!-- raw HTML omitted -->44 04 01 19&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->The 3rd byte is the direction of key (00 means key-down, 01 means key-up).  The 4th byte is the key scan code.  If we &lt;!-- raw HTML omitted -->look up&lt;!-- raw HTML omitted --> 0×19 we find it corresponds to the p key.&lt;!-- raw HTML omitted --> In the general case, the scan-code to character mapping depends which keyboard you’re using. In the PoC tool I implemented the mapping for for QWERTY keyboards, so if you have a UK/US keyboard, it should translate the majority of scan-codes to the correct characters. Note that we don’t get know whether characters are uppercase or lowercase. We’d have to manually track the status of CAPS Lock and SHIFT keys.&lt;!-- raw HTML omitted --> Without getting too bogged down in the details, here’s some sample output from the PoC tool that shows keystrokes being logged – in particular an administrator logging in with username Administrator, password Password:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->$ ./rdp-ssl-mitm.py -r 192.168.2.96:3389 &lt;!-- raw HTML omitted -->[+] Listening for connections on 0.0.0.0:3389&lt;!-- raw HTML omitted -->[+] Incoming connection from 192.168.190.1:60370&lt;!-- raw HTML omitted -->[+] New outgoing request to 192.168.2.96:3389 (SSL: 0)&lt;!-- raw HTML omitted -->[+] Connected&lt;!-- raw HTML omitted -->[+] Detected incoming SSL connection. Turning self into SSL socket&lt;!-- raw HTML omitted -->[+] Incoming connection from 192.168.190.1:60374&lt;!-- raw HTML omitted -->[+] New outgoing request to 192.168.2.96:3389 (SSL: 0)&lt;!-- raw HTML omitted -->[+] Connected&lt;!-- raw HTML omitted -->[+] Detected incoming SSL connection. Turning self into SSL socket&lt;!-- raw HTML omitted -->&amp;lt;LShift-down&amp;gt;A&amp;lt;LShift-up&amp;gt;DMINISTRATOR&amp;lt;Tab&amp;gt;&amp;lt;LShift-down&amp;gt;P&amp;lt;LShift-up&amp;gt;ASSWORD&amp;lt;Enter&amp;gt;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Conclusions&lt;!-- raw HTML omitted -->Learning to ignore SSL certificate warnings is as bad for RDP connection as it is for HTTPS websites. The results are similar: users quickly become vulnerable to Man-in-the-middle attacks. Such attacks can harvest usernames, passwords, keystrokes and other sensitive data.&lt;!-- raw HTML omitted --> Using SSL certificates that are signed by a Certificate Authority the RDP client trusts will result in no warning under normal operation, so is highly recommended.&lt;!-- raw HTML omitted --> This attack doesn’t work if the server mandates NLA, so using NLA is also highly recommended.&lt;!-- raw HTML omitted --> It’s important to note that this isn’t a vulnerability in the RDP Client or Server software.  Nor is this a  new discovery.  It’s a weakness in way RDP is sometimes used which stems from users ignoring security warnings.  At a technical level, this is a fairly vanilla SSL MiTM attack.&lt;!-- raw HTML omitted --> It might be interesting to extend this work by recording screen captures; or by injecting images of login boxes to encourage users to part of with other credentials. There would also be an opportunity to attack any drives that the RDP client has mapped for drive redirection – see &lt;!-- raw HTML omitted -->Attacking the RDP Clients&lt;!-- raw HTML omitted --> for inspiration. These would be pretty demanding coding challenges, though!&lt;/p></content></item></channel></rss>